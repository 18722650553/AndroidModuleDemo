apply plugin: 'com.android.application'

/**
 * 打包时间
 */
static String releaseTime() {
    return "\"" + new Date().format("yyyy-MM-dd HH:mm") + "\""
}

/**
 * 根据build时间自动生成versionCode
 */
static def createVersionCode() {
    def year = new Date().format("yy")
    def month = new Date().format("MM")
    def other = new Date().format("ddHHmm")
    //年份-1 月份+12
    year = year.toInteger() - 1
    month = month.toInteger() + 12
    def code = year.toString() + month.toString() + other
    return code.toInteger();
}

android {
    compileSdkVersion rootProject.ext.versions.compileSdkVersion
    buildToolsVersion rootProject.ext.versions.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.versions.minSdkVersion
        targetSdkVersion rootProject.ext.versions.targetSdkVersion

        signingConfigs {
            config {
                keyAlias 'amd'
                keyPassword '123456'
                storeFile file('../key/amd.jsk')
                storePassword '123456'
            }
        }

        defaultConfig {
            minSdkVersion rootProject.ext.versions.minSdkVersion
            targetSdkVersion rootProject.ext.versions.targetSdkVersion
            versionCode createVersionCode()
            multiDexEnabled true
            signingConfig signingConfigs.config

            ndk {
                abiFilters "armeabi-v7a"
            }

            javaCompileOptions {
                annotationProcessorOptions {
                    arguments = [AROUTER_MODULE_NAME: project.getName()]
                    includeCompileClasspath = true
                }
            }
        }

    }

    buildTypes {
        release {
            lintOptions {
                checkReleaseBuilds false
                abortOnError false
            }
            //不使用混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility rootProject.ext.versions.javaSDKVersion
        sourceCompatibility rootProject.ext.versions.javaSDKVersion
    }

    dexOptions {
        javaMaxHeapSize "5g"
    }
    repositories {
        flatDir {
            dirs project(':common_base').file('libs')
        }
    }
    //多维度标签
    flavorDimensions "default"
    //多渠道配置
    productFlavors {
        //开发
        DEV {
            dimension "default"
            versionName rootProject.ext.versions.versionNameDEV
            applicationId rootProject.ext.versions.applicationIdDEV
            resValue "string", "app_name", "AMD_DEV"
            buildConfigField("String", "RELEASE_TIME", releaseTime())
            manifestPlaceholders = [
                    //7.0文件权限
                    FILE_PROVIDER: applicationId,
            ]
        }

        //生产
        PRO {
            dimension "default"
            versionName rootProject.ext.versions.versionName
            applicationId rootProject.ext.versions.applicationId
            resValue "string", "app_name", "AMD"
            buildConfigField("String", "RELEASE_TIME", releaseTime())
            manifestPlaceholders = [
                    //7.0文件权限
                    FILE_PROVIDER: applicationId,
            ]
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "AMD_v${variant.versionName}_${variant.productFlavors[0].name}_${variant.buildType.name}.apk"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    annotationProcessor rootProject.ext.dependencies["butterknifeCompiler"]

    //公用依赖包
    implementation project(':common_base')
    if (!Boolean.valueOf(rootProject.ext.isModule)) {

        //main模块
        implementation project(':module_main')
        //商城模块
        implementation project(':module_market')
        //用户模块
        implementation project(':module_user')
        //玩Android模块
        implementation project(':module_wan_android')

    }
}